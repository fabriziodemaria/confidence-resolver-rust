// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.3
//   protoc               v5.29.3
// source: resolver/api.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Struct } from "../google/protobuf/struct";

export const protobufPackage = "confidence.flags.resolver.v1";

export enum ResolveReason {
  /** RESOLVE_REASON_UNSPECIFIED - Unspecified enum. */
  RESOLVE_REASON_UNSPECIFIED = 0,
  /** RESOLVE_REASON_MATCH - The flag was successfully resolved because one rule matched. */
  RESOLVE_REASON_MATCH = 1,
  /** RESOLVE_REASON_NO_SEGMENT_MATCH - The flag could not be resolved because no rule matched. */
  RESOLVE_REASON_NO_SEGMENT_MATCH = 2,
  /**
   * RESOLVE_REASON_NO_TREATMENT_MATCH - The flag could not be resolved because the matching rule had no variant
   * that could be assigned.
   *
   * @deprecated
   */
  RESOLVE_REASON_NO_TREATMENT_MATCH = 3,
  /** RESOLVE_REASON_FLAG_ARCHIVED - The flag could not be resolved because it was archived. */
  RESOLVE_REASON_FLAG_ARCHIVED = 4,
  /** RESOLVE_REASON_TARGETING_KEY_ERROR - The flag could not be resolved because the targeting key field was invalid */
  RESOLVE_REASON_TARGETING_KEY_ERROR = 5,
  /** RESOLVE_REASON_ERROR - Unknown error occurred during the resolve */
  RESOLVE_REASON_ERROR = 6,
  UNRECOGNIZED = -1,
}

export function resolveReasonFromJSON(object: any): ResolveReason {
  switch (object) {
    case 0:
    case "RESOLVE_REASON_UNSPECIFIED":
      return ResolveReason.RESOLVE_REASON_UNSPECIFIED;
    case 1:
    case "RESOLVE_REASON_MATCH":
      return ResolveReason.RESOLVE_REASON_MATCH;
    case 2:
    case "RESOLVE_REASON_NO_SEGMENT_MATCH":
      return ResolveReason.RESOLVE_REASON_NO_SEGMENT_MATCH;
    case 3:
    case "RESOLVE_REASON_NO_TREATMENT_MATCH":
      return ResolveReason.RESOLVE_REASON_NO_TREATMENT_MATCH;
    case 4:
    case "RESOLVE_REASON_FLAG_ARCHIVED":
      return ResolveReason.RESOLVE_REASON_FLAG_ARCHIVED;
    case 5:
    case "RESOLVE_REASON_TARGETING_KEY_ERROR":
      return ResolveReason.RESOLVE_REASON_TARGETING_KEY_ERROR;
    case 6:
    case "RESOLVE_REASON_ERROR":
      return ResolveReason.RESOLVE_REASON_ERROR;
    case -1:
    case "UNRECOGNIZED":
    default:
      return ResolveReason.UNRECOGNIZED;
  }
}

export function resolveReasonToJSON(object: ResolveReason): string {
  switch (object) {
    case ResolveReason.RESOLVE_REASON_UNSPECIFIED:
      return "RESOLVE_REASON_UNSPECIFIED";
    case ResolveReason.RESOLVE_REASON_MATCH:
      return "RESOLVE_REASON_MATCH";
    case ResolveReason.RESOLVE_REASON_NO_SEGMENT_MATCH:
      return "RESOLVE_REASON_NO_SEGMENT_MATCH";
    case ResolveReason.RESOLVE_REASON_NO_TREATMENT_MATCH:
      return "RESOLVE_REASON_NO_TREATMENT_MATCH";
    case ResolveReason.RESOLVE_REASON_FLAG_ARCHIVED:
      return "RESOLVE_REASON_FLAG_ARCHIVED";
    case ResolveReason.RESOLVE_REASON_TARGETING_KEY_ERROR:
      return "RESOLVE_REASON_TARGETING_KEY_ERROR";
    case ResolveReason.RESOLVE_REASON_ERROR:
      return "RESOLVE_REASON_ERROR";
    case ResolveReason.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface ResolveSimpleRequest {
  clientSecret: string;
  evaluationContext?: { [key: string]: any } | undefined;
  name: string;
}

export interface ResolveFlagsRequest {
  /**
   * If non-empty, the specific flags are resolved, otherwise all flags
   * available to the client will be resolved.
   */
  flags: string[];
  /**
   * An object that contains data used in the flag resolve. For example,
   * the targeting key e.g. the id of the randomization unit, other attributes
   * like country or version that are used for targeting.
   */
  evaluationContext?:
    | { [key: string]: any }
    | undefined;
  /**
   * Credentials for the client. It is used to identify the client and find
   * the flags that are available to it.
   */
  clientSecret: string;
  /**
   * Determines whether the flags should be applied directly as part of the
   * resolve, or delayed until `ApplyFlag` is called. A flag is typically
   * applied when it is used, if this occurs much later than the resolve, then
   * `apply` should likely be set to false.
   */
  apply: boolean;
}

export interface ResolveFlagsResponse {
  /**
   * The list of all flags that could be resolved. Note: if any flag was
   * archived it will not be included in this list.
   */
  resolvedFlags: ResolvedFlag[];
  /**
   * An opaque token that is used when `apply` is set to false in `ResolveFlags`.
   * When `apply` is set to false, the token must be passed to `ApplyFlags`.
   */
  resolveToken: Uint8Array;
  /** Unique identifier for this particular resolve request. */
  resolveId: string;
}

export interface ResolvedFlag {
  /** The id of the flag that as resolved. */
  flag: string;
  /** The id of the resolved variant has the format `flags/abc/variants/xyz`. */
  variant: string;
  /**
   * The value corresponding to the variant. It will always be a json object,
   * for example `{ "color": "red", "size": 12 }`.
   */
  value?:
    | { [key: string]: any }
    | undefined;
  /** The reason to why the flag could be resolved or not. */
  reason: ResolveReason;
}

function createBaseResolveSimpleRequest(): ResolveSimpleRequest {
  return { clientSecret: "", evaluationContext: undefined, name: "" };
}

export const ResolveSimpleRequest: MessageFns<ResolveSimpleRequest> = {
  encode(message: ResolveSimpleRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.clientSecret !== "") {
      writer.uint32(10).string(message.clientSecret);
    }
    if (message.evaluationContext !== undefined) {
      Struct.encode(Struct.wrap(message.evaluationContext), writer.uint32(18).fork()).join();
    }
    if (message.name !== "") {
      writer.uint32(26).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ResolveSimpleRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResolveSimpleRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.clientSecret = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.evaluationContext = Struct.unwrap(Struct.decode(reader, reader.uint32()));
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.name = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ResolveSimpleRequest {
    return {
      clientSecret: isSet(object.clientSecret) ? globalThis.String(object.clientSecret) : "",
      evaluationContext: isObject(object.evaluationContext) ? object.evaluationContext : undefined,
      name: isSet(object.name) ? globalThis.String(object.name) : "",
    };
  },

  toJSON(message: ResolveSimpleRequest): unknown {
    const obj: any = {};
    if (message.clientSecret !== "") {
      obj.clientSecret = message.clientSecret;
    }
    if (message.evaluationContext !== undefined) {
      obj.evaluationContext = message.evaluationContext;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ResolveSimpleRequest>, I>>(base?: I): ResolveSimpleRequest {
    return ResolveSimpleRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ResolveSimpleRequest>, I>>(object: I): ResolveSimpleRequest {
    const message = createBaseResolveSimpleRequest();
    message.clientSecret = object.clientSecret ?? "";
    message.evaluationContext = object.evaluationContext ?? undefined;
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseResolveFlagsRequest(): ResolveFlagsRequest {
  return { flags: [], evaluationContext: undefined, clientSecret: "", apply: false };
}

export const ResolveFlagsRequest: MessageFns<ResolveFlagsRequest> = {
  encode(message: ResolveFlagsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.flags) {
      writer.uint32(10).string(v!);
    }
    if (message.evaluationContext !== undefined) {
      Struct.encode(Struct.wrap(message.evaluationContext), writer.uint32(18).fork()).join();
    }
    if (message.clientSecret !== "") {
      writer.uint32(26).string(message.clientSecret);
    }
    if (message.apply !== false) {
      writer.uint32(32).bool(message.apply);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ResolveFlagsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResolveFlagsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.flags.push(reader.string());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.evaluationContext = Struct.unwrap(Struct.decode(reader, reader.uint32()));
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.clientSecret = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.apply = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ResolveFlagsRequest {
    return {
      flags: globalThis.Array.isArray(object?.flags) ? object.flags.map((e: any) => globalThis.String(e)) : [],
      evaluationContext: isObject(object.evaluationContext) ? object.evaluationContext : undefined,
      clientSecret: isSet(object.clientSecret) ? globalThis.String(object.clientSecret) : "",
      apply: isSet(object.apply) ? globalThis.Boolean(object.apply) : false,
    };
  },

  toJSON(message: ResolveFlagsRequest): unknown {
    const obj: any = {};
    if (message.flags?.length) {
      obj.flags = message.flags;
    }
    if (message.evaluationContext !== undefined) {
      obj.evaluationContext = message.evaluationContext;
    }
    if (message.clientSecret !== "") {
      obj.clientSecret = message.clientSecret;
    }
    if (message.apply !== false) {
      obj.apply = message.apply;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ResolveFlagsRequest>, I>>(base?: I): ResolveFlagsRequest {
    return ResolveFlagsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ResolveFlagsRequest>, I>>(object: I): ResolveFlagsRequest {
    const message = createBaseResolveFlagsRequest();
    message.flags = object.flags?.map((e) => e) || [];
    message.evaluationContext = object.evaluationContext ?? undefined;
    message.clientSecret = object.clientSecret ?? "";
    message.apply = object.apply ?? false;
    return message;
  },
};

function createBaseResolveFlagsResponse(): ResolveFlagsResponse {
  return { resolvedFlags: [], resolveToken: new Uint8Array(0), resolveId: "" };
}

export const ResolveFlagsResponse: MessageFns<ResolveFlagsResponse> = {
  encode(message: ResolveFlagsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.resolvedFlags) {
      ResolvedFlag.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.resolveToken.length !== 0) {
      writer.uint32(18).bytes(message.resolveToken);
    }
    if (message.resolveId !== "") {
      writer.uint32(26).string(message.resolveId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ResolveFlagsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResolveFlagsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.resolvedFlags.push(ResolvedFlag.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.resolveToken = reader.bytes();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.resolveId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ResolveFlagsResponse {
    return {
      resolvedFlags: globalThis.Array.isArray(object?.resolvedFlags)
        ? object.resolvedFlags.map((e: any) => ResolvedFlag.fromJSON(e))
        : [],
      resolveToken: isSet(object.resolveToken) ? bytesFromBase64(object.resolveToken) : new Uint8Array(0),
      resolveId: isSet(object.resolveId) ? globalThis.String(object.resolveId) : "",
    };
  },

  toJSON(message: ResolveFlagsResponse): unknown {
    const obj: any = {};
    if (message.resolvedFlags?.length) {
      obj.resolvedFlags = message.resolvedFlags.map((e) => ResolvedFlag.toJSON(e));
    }
    if (message.resolveToken.length !== 0) {
      obj.resolveToken = base64FromBytes(message.resolveToken);
    }
    if (message.resolveId !== "") {
      obj.resolveId = message.resolveId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ResolveFlagsResponse>, I>>(base?: I): ResolveFlagsResponse {
    return ResolveFlagsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ResolveFlagsResponse>, I>>(object: I): ResolveFlagsResponse {
    const message = createBaseResolveFlagsResponse();
    message.resolvedFlags = object.resolvedFlags?.map((e) => ResolvedFlag.fromPartial(e)) || [];
    message.resolveToken = object.resolveToken ?? new Uint8Array(0);
    message.resolveId = object.resolveId ?? "";
    return message;
  },
};

function createBaseResolvedFlag(): ResolvedFlag {
  return { flag: "", variant: "", value: undefined, reason: 0 };
}

export const ResolvedFlag: MessageFns<ResolvedFlag> = {
  encode(message: ResolvedFlag, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.flag !== "") {
      writer.uint32(10).string(message.flag);
    }
    if (message.variant !== "") {
      writer.uint32(18).string(message.variant);
    }
    if (message.value !== undefined) {
      Struct.encode(Struct.wrap(message.value), writer.uint32(26).fork()).join();
    }
    if (message.reason !== 0) {
      writer.uint32(40).int32(message.reason);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ResolvedFlag {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResolvedFlag();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.flag = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.variant = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.value = Struct.unwrap(Struct.decode(reader, reader.uint32()));
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.reason = reader.int32() as any;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ResolvedFlag {
    return {
      flag: isSet(object.flag) ? globalThis.String(object.flag) : "",
      variant: isSet(object.variant) ? globalThis.String(object.variant) : "",
      value: isObject(object.value) ? object.value : undefined,
      reason: isSet(object.reason) ? resolveReasonFromJSON(object.reason) : 0,
    };
  },

  toJSON(message: ResolvedFlag): unknown {
    const obj: any = {};
    if (message.flag !== "") {
      obj.flag = message.flag;
    }
    if (message.variant !== "") {
      obj.variant = message.variant;
    }
    if (message.value !== undefined) {
      obj.value = message.value;
    }
    if (message.reason !== 0) {
      obj.reason = resolveReasonToJSON(message.reason);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ResolvedFlag>, I>>(base?: I): ResolvedFlag {
    return ResolvedFlag.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ResolvedFlag>, I>>(object: I): ResolvedFlag {
    const message = createBaseResolvedFlag();
    message.flag = object.flag ?? "";
    message.variant = object.variant ?? "";
    message.value = object.value ?? undefined;
    message.reason = object.reason ?? 0;
    return message;
  },
};

function bytesFromBase64(b64: string): Uint8Array {
  if ((globalThis as any).Buffer) {
    return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
  } else {
    const bin = globalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}

function base64FromBytes(arr: Uint8Array): string {
  if ((globalThis as any).Buffer) {
    return globalThis.Buffer.from(arr).toString("base64");
  } else {
    const bin: string[] = [];
    arr.forEach((byte) => {
      bin.push(globalThis.String.fromCharCode(byte));
    });
    return globalThis.btoa(bin.join(""));
  }
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
