// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v5.29.3
// source: resolver/api.proto

package resolver

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	structpb "google.golang.org/protobuf/types/known/structpb"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ResolveReason int32

const (
	// Unspecified enum.
	ResolveReason_RESOLVE_REASON_UNSPECIFIED ResolveReason = 0
	// The flag was successfully resolved because one rule matched.
	ResolveReason_RESOLVE_REASON_MATCH ResolveReason = 1
	// The flag could not be resolved because no rule matched.
	ResolveReason_RESOLVE_REASON_NO_SEGMENT_MATCH ResolveReason = 2
	// The flag could not be resolved because the matching rule had no variant
	// that could be assigned.
	//
	// Deprecated: Marked as deprecated in resolver/api.proto.
	ResolveReason_RESOLVE_REASON_NO_TREATMENT_MATCH ResolveReason = 3
	// The flag could not be resolved because it was archived.
	ResolveReason_RESOLVE_REASON_FLAG_ARCHIVED ResolveReason = 4
	// The flag could not be resolved because the targeting key field was invalid
	ResolveReason_RESOLVE_REASON_TARGETING_KEY_ERROR ResolveReason = 5
	// Unknown error occurred during the resolve
	ResolveReason_RESOLVE_REASON_ERROR ResolveReason = 6
)

// Enum value maps for ResolveReason.
var (
	ResolveReason_name = map[int32]string{
		0: "RESOLVE_REASON_UNSPECIFIED",
		1: "RESOLVE_REASON_MATCH",
		2: "RESOLVE_REASON_NO_SEGMENT_MATCH",
		3: "RESOLVE_REASON_NO_TREATMENT_MATCH",
		4: "RESOLVE_REASON_FLAG_ARCHIVED",
		5: "RESOLVE_REASON_TARGETING_KEY_ERROR",
		6: "RESOLVE_REASON_ERROR",
	}
	ResolveReason_value = map[string]int32{
		"RESOLVE_REASON_UNSPECIFIED":         0,
		"RESOLVE_REASON_MATCH":               1,
		"RESOLVE_REASON_NO_SEGMENT_MATCH":    2,
		"RESOLVE_REASON_NO_TREATMENT_MATCH":  3,
		"RESOLVE_REASON_FLAG_ARCHIVED":       4,
		"RESOLVE_REASON_TARGETING_KEY_ERROR": 5,
		"RESOLVE_REASON_ERROR":               6,
	}
)

func (x ResolveReason) Enum() *ResolveReason {
	p := new(ResolveReason)
	*p = x
	return p
}

func (x ResolveReason) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ResolveReason) Descriptor() protoreflect.EnumDescriptor {
	return file_resolver_api_proto_enumTypes[0].Descriptor()
}

func (ResolveReason) Type() protoreflect.EnumType {
	return &file_resolver_api_proto_enumTypes[0]
}

func (x ResolveReason) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ResolveReason.Descriptor instead.
func (ResolveReason) EnumDescriptor() ([]byte, []int) {
	return file_resolver_api_proto_rawDescGZIP(), []int{0}
}

type ResolveSimpleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientSecret      string           `protobuf:"bytes,1,opt,name=client_secret,json=clientSecret,proto3" json:"client_secret,omitempty"`
	EvaluationContext *structpb.Struct `protobuf:"bytes,2,opt,name=evaluation_context,json=evaluationContext,proto3" json:"evaluation_context,omitempty"`
	Name              string           `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *ResolveSimpleRequest) Reset() {
	*x = ResolveSimpleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_resolver_api_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResolveSimpleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResolveSimpleRequest) ProtoMessage() {}

func (x *ResolveSimpleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_resolver_api_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResolveSimpleRequest.ProtoReflect.Descriptor instead.
func (*ResolveSimpleRequest) Descriptor() ([]byte, []int) {
	return file_resolver_api_proto_rawDescGZIP(), []int{0}
}

func (x *ResolveSimpleRequest) GetClientSecret() string {
	if x != nil {
		return x.ClientSecret
	}
	return ""
}

func (x *ResolveSimpleRequest) GetEvaluationContext() *structpb.Struct {
	if x != nil {
		return x.EvaluationContext
	}
	return nil
}

func (x *ResolveSimpleRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type ResolveFlagsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// If non-empty, the specific flags are resolved, otherwise all flags
	// available to the client will be resolved.
	Flags []string `protobuf:"bytes,1,rep,name=flags,proto3" json:"flags,omitempty"`
	// An object that contains data used in the flag resolve. For example,
	// the targeting key e.g. the id of the randomization unit, other attributes
	// like country or version that are used for targeting.
	EvaluationContext *structpb.Struct `protobuf:"bytes,2,opt,name=evaluation_context,json=evaluationContext,proto3" json:"evaluation_context,omitempty"`
	// Credentials for the client. It is used to identify the client and find
	// the flags that are available to it.
	ClientSecret string `protobuf:"bytes,3,opt,name=client_secret,json=clientSecret,proto3" json:"client_secret,omitempty"`
	// Determines whether the flags should be applied directly as part of the
	// resolve, or delayed until `ApplyFlag` is called. A flag is typically
	// applied when it is used, if this occurs much later than the resolve, then
	// `apply` should likely be set to false.
	Apply bool `protobuf:"varint,4,opt,name=apply,proto3" json:"apply,omitempty"`
}

func (x *ResolveFlagsRequest) Reset() {
	*x = ResolveFlagsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_resolver_api_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResolveFlagsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResolveFlagsRequest) ProtoMessage() {}

func (x *ResolveFlagsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_resolver_api_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResolveFlagsRequest.ProtoReflect.Descriptor instead.
func (*ResolveFlagsRequest) Descriptor() ([]byte, []int) {
	return file_resolver_api_proto_rawDescGZIP(), []int{1}
}

func (x *ResolveFlagsRequest) GetFlags() []string {
	if x != nil {
		return x.Flags
	}
	return nil
}

func (x *ResolveFlagsRequest) GetEvaluationContext() *structpb.Struct {
	if x != nil {
		return x.EvaluationContext
	}
	return nil
}

func (x *ResolveFlagsRequest) GetClientSecret() string {
	if x != nil {
		return x.ClientSecret
	}
	return ""
}

func (x *ResolveFlagsRequest) GetApply() bool {
	if x != nil {
		return x.Apply
	}
	return false
}

type ResolveFlagsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The list of all flags that could be resolved. Note: if any flag was
	// archived it will not be included in this list.
	ResolvedFlags []*ResolvedFlag `protobuf:"bytes,1,rep,name=resolved_flags,json=resolvedFlags,proto3" json:"resolved_flags,omitempty"`
	// An opaque token that is used when `apply` is set to false in `ResolveFlags`.
	// When `apply` is set to false, the token must be passed to `ApplyFlags`.
	ResolveToken []byte `protobuf:"bytes,2,opt,name=resolve_token,json=resolveToken,proto3" json:"resolve_token,omitempty"`
	// Unique identifier for this particular resolve request.
	ResolveId string `protobuf:"bytes,3,opt,name=resolve_id,json=resolveId,proto3" json:"resolve_id,omitempty"`
}

func (x *ResolveFlagsResponse) Reset() {
	*x = ResolveFlagsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_resolver_api_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResolveFlagsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResolveFlagsResponse) ProtoMessage() {}

func (x *ResolveFlagsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_resolver_api_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResolveFlagsResponse.ProtoReflect.Descriptor instead.
func (*ResolveFlagsResponse) Descriptor() ([]byte, []int) {
	return file_resolver_api_proto_rawDescGZIP(), []int{2}
}

func (x *ResolveFlagsResponse) GetResolvedFlags() []*ResolvedFlag {
	if x != nil {
		return x.ResolvedFlags
	}
	return nil
}

func (x *ResolveFlagsResponse) GetResolveToken() []byte {
	if x != nil {
		return x.ResolveToken
	}
	return nil
}

func (x *ResolveFlagsResponse) GetResolveId() string {
	if x != nil {
		return x.ResolveId
	}
	return ""
}

type ResolvedFlag struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The id of the flag that as resolved.
	Flag string `protobuf:"bytes,1,opt,name=flag,proto3" json:"flag,omitempty"`
	// The id of the resolved variant has the format `flags/abc/variants/xyz`.
	Variant string `protobuf:"bytes,2,opt,name=variant,proto3" json:"variant,omitempty"`
	// The value corresponding to the variant. It will always be a json object,
	// for example `{ "color": "red", "size": 12 }`.
	Value *structpb.Struct `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
	// The reason to why the flag could be resolved or not.
	Reason ResolveReason `protobuf:"varint,5,opt,name=reason,proto3,enum=confidence.flags.resolver.v1.ResolveReason" json:"reason,omitempty"`
}

func (x *ResolvedFlag) Reset() {
	*x = ResolvedFlag{}
	if protoimpl.UnsafeEnabled {
		mi := &file_resolver_api_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResolvedFlag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResolvedFlag) ProtoMessage() {}

func (x *ResolvedFlag) ProtoReflect() protoreflect.Message {
	mi := &file_resolver_api_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResolvedFlag.ProtoReflect.Descriptor instead.
func (*ResolvedFlag) Descriptor() ([]byte, []int) {
	return file_resolver_api_proto_rawDescGZIP(), []int{3}
}

func (x *ResolvedFlag) GetFlag() string {
	if x != nil {
		return x.Flag
	}
	return ""
}

func (x *ResolvedFlag) GetVariant() string {
	if x != nil {
		return x.Variant
	}
	return ""
}

func (x *ResolvedFlag) GetValue() *structpb.Struct {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *ResolvedFlag) GetReason() ResolveReason {
	if x != nil {
		return x.Reason
	}
	return ResolveReason_RESOLVE_REASON_UNSPECIFIED
}

var File_resolver_api_proto protoreflect.FileDescriptor

var file_resolver_api_proto_rawDesc = []byte{
	0x0a, 0x12, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x2f, 0x61, 0x70, 0x69, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1c, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65,
	0x2e, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0x97, 0x01, 0x0a, 0x14, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x53, 0x69, 0x6d,
	0x70, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12,
	0x46, 0x0a, 0x12, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x52, 0x11, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xae, 0x01, 0x0a, 0x13,
	0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x46, 0x0a, 0x12, 0x65, 0x76, 0x61,
	0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x11,
	0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x63, 0x72,
	0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x22, 0xad, 0x01, 0x0a,
	0x14, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x51, 0x0a, 0x0e, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65,
	0x64, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x66, 0x6c, 0x61, 0x67, 0x73,
	0x2e, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73,
	0x6f, 0x6c, 0x76, 0x65, 0x64, 0x46, 0x6c, 0x61, 0x67, 0x52, 0x0d, 0x72, 0x65, 0x73, 0x6f, 0x6c,
	0x76, 0x65, 0x64, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x6f,
	0x6c, 0x76, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x0c, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1d, 0x0a,
	0x0a, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x49, 0x64, 0x22, 0xb0, 0x01, 0x0a,
	0x0c, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x12, 0x0a,
	0x04, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x6c, 0x61,
	0x67, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x12, 0x2d, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x43, 0x0a, 0x06, 0x72, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x2e, 0x72, 0x65,
	0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76,
	0x65, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x2a,
	0xfd, 0x01, 0x0a, 0x0d, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x52, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x12, 0x1e, 0x0a, 0x1a, 0x52, 0x45, 0x53, 0x4f, 0x4c, 0x56, 0x45, 0x5f, 0x52, 0x45, 0x41,
	0x53, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x18, 0x0a, 0x14, 0x52, 0x45, 0x53, 0x4f, 0x4c, 0x56, 0x45, 0x5f, 0x52, 0x45, 0x41,
	0x53, 0x4f, 0x4e, 0x5f, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x10, 0x01, 0x12, 0x23, 0x0a, 0x1f, 0x52,
	0x45, 0x53, 0x4f, 0x4c, 0x56, 0x45, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x4e, 0x4f,
	0x5f, 0x53, 0x45, 0x47, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x10, 0x02,
	0x12, 0x29, 0x0a, 0x21, 0x52, 0x45, 0x53, 0x4f, 0x4c, 0x56, 0x45, 0x5f, 0x52, 0x45, 0x41, 0x53,
	0x4f, 0x4e, 0x5f, 0x4e, 0x4f, 0x5f, 0x54, 0x52, 0x45, 0x41, 0x54, 0x4d, 0x45, 0x4e, 0x54, 0x5f,
	0x4d, 0x41, 0x54, 0x43, 0x48, 0x10, 0x03, 0x1a, 0x02, 0x08, 0x01, 0x12, 0x20, 0x0a, 0x1c, 0x52,
	0x45, 0x53, 0x4f, 0x4c, 0x56, 0x45, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x46, 0x4c,
	0x41, 0x47, 0x5f, 0x41, 0x52, 0x43, 0x48, 0x49, 0x56, 0x45, 0x44, 0x10, 0x04, 0x12, 0x26, 0x0a,
	0x22, 0x52, 0x45, 0x53, 0x4f, 0x4c, 0x56, 0x45, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f,
	0x54, 0x41, 0x52, 0x47, 0x45, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x45, 0x52,
	0x52, 0x4f, 0x52, 0x10, 0x05, 0x12, 0x18, 0x0a, 0x14, 0x52, 0x45, 0x53, 0x4f, 0x4c, 0x56, 0x45,
	0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x06, 0x42,
	0x36, 0x0a, 0x28, 0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x70, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x2e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x2e,
	0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x42, 0x08, 0x41, 0x70, 0x69,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_resolver_api_proto_rawDescOnce sync.Once
	file_resolver_api_proto_rawDescData = file_resolver_api_proto_rawDesc
)

func file_resolver_api_proto_rawDescGZIP() []byte {
	file_resolver_api_proto_rawDescOnce.Do(func() {
		file_resolver_api_proto_rawDescData = protoimpl.X.CompressGZIP(file_resolver_api_proto_rawDescData)
	})
	return file_resolver_api_proto_rawDescData
}

var file_resolver_api_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_resolver_api_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_resolver_api_proto_goTypes = []interface{}{
	(ResolveReason)(0),           // 0: confidence.flags.resolver.v1.ResolveReason
	(*ResolveSimpleRequest)(nil), // 1: confidence.flags.resolver.v1.ResolveSimpleRequest
	(*ResolveFlagsRequest)(nil),  // 2: confidence.flags.resolver.v1.ResolveFlagsRequest
	(*ResolveFlagsResponse)(nil), // 3: confidence.flags.resolver.v1.ResolveFlagsResponse
	(*ResolvedFlag)(nil),         // 4: confidence.flags.resolver.v1.ResolvedFlag
	(*structpb.Struct)(nil),      // 5: google.protobuf.Struct
}
var file_resolver_api_proto_depIdxs = []int32{
	5, // 0: confidence.flags.resolver.v1.ResolveSimpleRequest.evaluation_context:type_name -> google.protobuf.Struct
	5, // 1: confidence.flags.resolver.v1.ResolveFlagsRequest.evaluation_context:type_name -> google.protobuf.Struct
	4, // 2: confidence.flags.resolver.v1.ResolveFlagsResponse.resolved_flags:type_name -> confidence.flags.resolver.v1.ResolvedFlag
	5, // 3: confidence.flags.resolver.v1.ResolvedFlag.value:type_name -> google.protobuf.Struct
	0, // 4: confidence.flags.resolver.v1.ResolvedFlag.reason:type_name -> confidence.flags.resolver.v1.ResolveReason
	5, // [5:5] is the sub-list for method output_type
	5, // [5:5] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_resolver_api_proto_init() }
func file_resolver_api_proto_init() {
	if File_resolver_api_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_resolver_api_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResolveSimpleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_resolver_api_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResolveFlagsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_resolver_api_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResolveFlagsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_resolver_api_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResolvedFlag); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_resolver_api_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_resolver_api_proto_goTypes,
		DependencyIndexes: file_resolver_api_proto_depIdxs,
		EnumInfos:         file_resolver_api_proto_enumTypes,
		MessageInfos:      file_resolver_api_proto_msgTypes,
	}.Build()
	File_resolver_api_proto = out.File
	file_resolver_api_proto_rawDesc = nil
	file_resolver_api_proto_goTypes = nil
	file_resolver_api_proto_depIdxs = nil
}
